import "platform:/resource/Zoo/model/zoo.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

pattern container {
	zoo: Zoo
}
pattern animalInEnclosure {
	enclosure: Enclosure{
		-animals -> animal
	}
	animal: Animal
}
pattern animalInEnclosureTemperature {
	enclosure: Enclosure{
		-animals -> animal
	}
	animal: Animal
}
pattern apeInEnclosure {
	enclosure: Enclosure{
		-animals -> ape
	}
	ape: Ape
}
pattern bearInEnclosure {
	enclosure: Enclosure{
		-animals -> bear
	}
	bear: Bear
}
pattern camelInEnclosure {
	enclosure: Enclosure{
		-animals -> camel
	}
	camel: Camel
}
pattern moreAnimalsThanCapacity {
	enclosure: Enclosure{
	}
	# enclosure.capacity < count(animalInEnclosure)
}
rule renameApe(str:EString){
	animal:Ape {
		.name := param::str
	}
}

event tempartureWarning {
	Animal animal;
	Enclosure enclosure;
	EDouble enclosureTemparture;
}
event humidityWarning {
	Animal animal;
	Enclosure enclosure;
	EDouble enclosureHumidity;
}
event bearBeforeApe {
	Enclosure enclosure;
	Bear bear;
	Ape ape;
}
event sizeWarning {
	Enclosure enclosure;
	Animal animal;
}
event capacityWarning {
	Enclosure enclosure;
	EInt maxCapacity;
	//EInt actualSize;
}
event animalsWithSameName {
	Animal animal1;
	Animal animal2;
	EString name;
}
event animalsWithSameAge {
	Animal animal1;
	Animal animal2;
	EInt age;
}
event animalsWithSameNameAndAge1 {
	Animal animal1;
	Animal animal2;
	EString name;
	EInt age;
}
event animalsWithSameNameAndAge2 {
	Animal animal1;
	Animal animal2;
	EString name;
	EInt age;
}
event animalsWithSameNameAndAge3 {
	Animal animal1;
	Animal animal2;
	EString name;
	EInt age;
}
event enviromentMissmatchWarning {
	Enclosure enclosure;
	Animal animal;
}
event toleranceSinCosWarning {
	Bear bear;
	EDouble tolerance;
}

event apeKleeWarning {
	Ape animal;
	Enclosure enclosure;
}

event_pattern apeKleeCheck spawns apeKleeWarning {
	newApe: apeInEnclosure
	
	# all(newApe) {
		! vanished(newApe) &&
		newApe.ape.name == "Klee"
	} 
	
	spawn apeKleeWarning(newApe.ape,newApe.enclosure)
}

event_pattern enviromentCheck spawns enviromentMissmatchWarning {
	newAnimal: animalInEnclosure
	
	# all(newAnimal) {
		! vanished(newAnimal) &&
		newAnimal.enclosure.enviromentType != newAnimal.animal.preferedEnviroment
	}
	
	spawn enviromentMissmatchWarning(newAnimal.enclosure,newAnimal.animal)
}
event_pattern temperatureCheck spawns tempartureWarning {
	newAnimal: animalInEnclosure
	
	# all(newAnimal) {
		! vanished(newAnimal) &&
		newAnimal.animal.tolerance <= abs(newAnimal.animal.preferedTemperature - newAnimal.enclosure.temperature)
	}
	
	spawn tempartureWarning(newAnimal.animal,newAnimal.enclosure,newAnimal.enclosure.temperature)
}
event_pattern humidityCheck spawns humidityWarning {
	newAnimal: animalInEnclosure
	
	#all(newAnimal) {
		[! vanished(newAnimal) &&
		abs(newAnimal.animal.preferedHumidity - newAnimal.enclosure.humidity) >= newAnimal.animal.tolerance]
	}
	
	spawn humidityWarning(newAnimal.animal,newAnimal.enclosure,newAnimal.enclosure.humidity)
}
event_pattern bearBeforeApeCheck spawns bearBeforeApe {
	newBear: bearInEnclosure
	newApe: apeInEnclosure
	
	newBear.enclosure == newApe.enclosure
	
	# all(newBear) -> all(newApe) {
		[! vanished(newBear) && ! vanished(newApe)]
	}
	
	spawn bearBeforeApe(newApe.enclosure, newBear.bear, newApe.ape)
}
event_pattern sizeCheck spawns sizeWarning {
	newAnimal: animalInEnclosure
	
	# all(newAnimal) {
		! vanished(newAnimal) &&
		newAnimal.animal.sizeModifier > newAnimal.enclosure.maxSize
	}
	
	spawn sizeWarning(newAnimal.enclosure,newAnimal.animal)
}
// not needed -> direct pattern, count included?
event_pattern capacityCheck spawns capacityWarning {
	encolsureCapacity: moreAnimalsThanCapacity
	
	# all(encolsureCapacity) {
		! vanished(encolsureCapacity)
	}
	
	spawn capacityWarning(encolsureCapacity.enclosure,encolsureCapacity.enclosure.capacity)
}
event_pattern toleranceOfBearSinCosCheck spawns toleranceSinCosWarning {
	newBear: bearInEnclosure
	
	# all(newBear) {
		! vanished(newBear) &&
		sin(newBear.bear.tolerance) == cos(newBear.bear.tolerance)
	}
	
	spawn toleranceSinCosWarning(newBear.bear,newBear.bear.tolerance)
}
event_pattern nameCheck spawns animalsWithSameName {
	animal1: animalInEnclosure
	animal2: animalInEnclosure
	
	animal1.animal != animal2.animal

	# all(animal1) && all(animal2) {
		animal1.animal.name == animal2.animal.name &&
		! vanished(animal1) && ! vanished(animal2)
	}
	
	spawn animalsWithSameName(animal1.animal,animal2.animal,animal1.animal.name)
}
event_pattern ageCheck spawns animalsWithSameAge {
	animal1: animalInEnclosure
	animal2: animalInEnclosure
	
	animal1.animal != animal2.animal
	
	# all(animal1) && all(animal2) {
		animal1.animal.age == animal2.animal.age &&
		! vanished(animal1) && ! vanished(animal2)
	}
	
	spawn animalsWithSameAge(animal1.animal,animal2.animal,animal1.animal.age)
}
event_pattern nameAndAgeCheck1 spawns animalsWithSameNameAndAge1 {
	animal1: animalInEnclosure
	animal2: animalInEnclosure
	
	animal1.animal != animal2.animal
	
	# all(animal1) && all(animal2) {
		animal1.animal.name + animal1.animal.age == animal2.animal.name + animal2.animal.age &&
		! vanished(animal1) && ! vanished(animal2)
	}
	
	spawn animalsWithSameNameAndAge1(animal1.animal,animal2.animal,animal1.animal.name,animal1.animal.age)
}
event_pattern nameAndAgeCheck2 spawns animalsWithSameNameAndAge2 {
	animalswSameName: animalsWithSameName
	animalswSameAge: animalsWithSameAge
	
	animalswSameAge.animal1 == animalswSameName.animal1
	animalswSameAge.animal2 == animalswSameName.animal2
	
	# all(animalswSameAge) && all(animalswSameName)
	
	spawn animalsWithSameNameAndAge2(animalswSameAge.animal1,animalswSameAge.animal2,animalswSameAge.animal1.name,animalswSameAge.animal1.age)
}
event_pattern nameAndAgeCheck3 spawns animalsWithSameNameAndAge2 {
	animalswSameName: animalsWithSameName
	animalswSameAge: animalsWithSameAge

	animalswSameAge.animal1 == animalswSameName.animal2
	animalswSameAge.animal2 == animalswSameName.animal1
	
	# all(animalswSameAge) && all(animalswSameName)
	
	spawn animalsWithSameNameAndAge2(animalswSameAge.animal1,animalswSameAge.animal2,animalswSameAge.animal1.name,animalswSameAge.animal1.age)
}
event_pattern nameAndAgeCheck4 spawns animalsWithSameNameAndAge3 {
	animal1: animalInEnclosure
	animal2: animalInEnclosure
	
	animal1.animal != animal2.animal
	
	# all(animal1) && all(animal2) {
		animal1.animal.name == animal2.animal.name && animal1.animal.age == animal2.animal.age &&
		! vanished(animal1) && ! vanished(animal2)
	}
	
	spawn animalsWithSameNameAndAge3(animal1.animal,animal2.animal,animal1.animal.name,animal1.animal.age)
}

event_pattern renameApeKlee applies renameApe {
	kleeWarning: apeKleeWarning
	kleeRename: renameApe
	
	kleeWarning.animal == kleeRename.animal
	
	# all(kleeWarning) && all(kleeRename)
	
	apply renameApe("Richter") to kleeRename
}
rule moveAnimalToEnclousureWithFreeSpace() {
	animal: Animal {
	}
	oldEnclosure: Enclosure {
		-- -animals -> animal
	}
	# oldEnclosure.capacity < count(countAnimalInEnclosureOld)
	
	newEnclosure: Enclosure{ 
		++ -animals -> animal
	}
	# newEnclosure.capacity > count(countAnimalInEnclosureNew)
}
pattern countAnimalInEnclosureOld {
	animal2: Animal {
	}
	oldEnclosure: Enclosure {
		-animals -> animal2
	}
}

pattern countAnimalInEnclosureNew {
	animal2: Animal {
	}
	newEnclosure: Enclosure {
		-animals -> animal2
	}
}
event_pattern applyOnOverfilledEnclosure applies moveAnimalToEnclousureWithFreeSpace {
	moveRule: moveAnimalToEnclousureWithFreeSpace
	
	# all(moveRule) {
		!vanished(moveRule)
	}
	
	apply moveAnimalToEnclousureWithFreeSpace() to moveRule
}
