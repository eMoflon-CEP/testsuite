import "platform:/resource/Flights/model/Flights.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"

/*
 * pattern to get container
 */
pattern container {
	model: FlightModel
}
event modelContainer {
	FlightModel model;
}
event_pattern hasContainer spawns modelContainer {
	event1: container
	
	# all(event1)
	
	spawn modelContainer(event1.model)
}

/*
 * find flights with a changing arrival time
 */
pattern flightWithArrival() {       
  	routex: Route
  	flight: Flight {
  		-route->routex
		-arrival->arrival
		-departure->departure
  		-plane->plane  
  	}
	arrival: TimeStamp
	departure: TimeStamp
  	plane: Plane
}

/*
 * found delayed flights
 */
event flightDelayed {
	Flight flight;
	TimeStamp arrival;
}
/*
 * check if a changed flight is delayed
 */
event_pattern flightDelayCheck spawns flightDelayed {
	event1 : flightWithArrival  
	          
	# all(event1) {
		event1.arrival.time > event1.routex.duration + event1.departure.time && !vanished(event1)   
	}               
	 
	spawn flightDelayed(event1.flight, event1.arrival)                     
}

/*
 * find travels with connecting flights
 */
pattern travelHasConnectingFlight {
	transitAirport: Airport {
		-gates->arrivalGate
		-gates->departingGate	
	}
	arrivalGate: Gate
	departingGate: Gate
	
	routex: Route {
		-trg -> transitAirport
	}
	flight: Flight {
		-route -> routex
		-trg -> arrivalGate
	}
	connectingRoute: Route {
		-src -> transitAirport
	}
	connectingFlight: Flight {
		-route -> connectingRoute
		-src -> departingGate
		-departure -> connectionDeparture
	}
	connectionDeparture : TimeStamp
	travel: Travel {
		-flights -> flight
		-flights -> connectingFlight
	}
}
/*
 * not reachable connecting flight found
 */
event connectingFlightNotReachable {
	Flight connectingFlight;
	Travel travel;
}
/*
 * check if a connecting flight is not reachable due to a delay
 */
event_pattern connectingFlightNotReachableCheck spawns connectingFlightNotReachable {
	delayed: flightDelayed
	connecting: travelHasConnectingFlight
	
	delayed.flight == connecting.flight 
	            
	# all(connecting -> all(delayed)) { 
		(delayed.arrival.time + abs(connecting.departingGate.position - connecting.arrivalGate.position)) * connecting.transitAirport.size > connecting.connectionDeparture.time
	}          
	     
	spawn connectingFlightNotReachable(connecting.connectingFlight, connecting.travel)
}

/*
 * change a flight to a flight with the same route
 */
rule changeFlight() {
	travel : Travel {
		-- -flights -> oldFlight
		++ -flights -> newFlight
	}
	oldFlight : Flight{
	}
	newFlight : Flight{
	}
	trgAirport : Airport
	srcAirport: Airport
} when identicalRoute
/*
 * support pattern to allow the same route as well as different routes
 */
condition oldRoute = enforce supportOldRoute
condition newRoute = enforce supportNewRoute

condition identicalRoute = oldRoute && newRoute

pattern supportOldRoute {
	oldRoute : Route {
		-trg -> trgAirport
		-src -> srcAirport
	}
	oldFlight : Flight{
		-route -> oldRoute
	}
	trgAirport : Airport
	srcAirport: Airport
}

pattern supportNewRoute {
	newRoute : Route {
		-trg -> trgAirport
		-src -> srcAirport
	}
	newFlight : Flight{
		-route -> newRoute
	}
	trgAirport : Airport
	srcAirport: Airport
}
/*
 * simple rebook for test purposes
 */
event_pattern rebookConnectingFlightTest applies changeFlight {
	rebook: changeFlight
	notReachable: connectingFlightNotReachable
	
	notReachable.connectingFlight == rebook.oldFlight
	
	# all(notReachable) && all(rebook) {
		rebook.newFlight.ID == "FRA->BER_2"
	}
	
	
	apply changeFlight() to rebook
}
      